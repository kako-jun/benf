use clap::{Arg, Command};
use benf::{
    core::{international::extract_numbers_international, RiskLevel, BenfordResult},
    VERSION
};
use std::io::{self, Read};

#[tokio::main]
async fn main() {
    let matches = Command::new("benf")
        .version(VERSION)
        .about("A CLI tool for detecting anomalies using Benford's Law with international numeral support")
        .arg(Arg::new("input")
            .help("Input data (file path, URL, or string)")
            .index(1))
        .arg(Arg::new("url")
            .long("url")
            .value_name("URL")
            .help("Fetch data from URL"))
        .arg(Arg::new("format")
            .long("format")
            .value_name("FORMAT")
            .help("Output format: text, csv, json, yaml, toml, xml")
            .default_value("text"))
        .arg(Arg::new("quiet")
            .long("quiet")
            .short('q')
            .help("Minimal output (numbers only)")
            .action(clap::ArgAction::SetTrue))
        .arg(Arg::new("verbose")
            .long("verbose")
            .short('v')
            .help("Detailed statistics")
            .action(clap::ArgAction::SetTrue))
        .arg(Arg::new("lang")
            .long("lang")
            .short('l')
            .value_name("LANGUAGE")
            .help("Output language: en, ja, zh, hi, ar")
            .default_value("auto"))
        .get_matches();

    // Determine input source based on arguments
    let input_text = if let Some(url) = matches.get_one::<String>("url") {
        // Fetch URL content
        match fetch_url_content(url).await {
            Ok(content) => {
                if content.trim().is_empty() {
                    eprintln!("Error: No content from URL: {}", url);
                    std::process::exit(2);
                }
                content
            }
            Err(e) => {
                eprintln!("Error fetching URL '{}': {}", url, e);
                std::process::exit(1);
            }
        }
    } else if let Some(input) = matches.get_one::<String>("input") {
        // Check if it's a file path or string data
        if std::path::Path::new(input).exists() {
            // Read file contents
            match std::fs::read_to_string(input) {
                Ok(content) => {
                    if content.trim().is_empty() {
                        eprintln!("Error: File is empty: {}", input);
                        std::process::exit(2);
                    }
                    content
                }
                Err(e) => {
                    eprintln!("Error reading file '{}': {}", input, e);
                    std::process::exit(1);
                }
            }
        } else {
            // Treat as string data
            input.clone()
        }
    } else {
        // Read from stdin
        let mut buffer = String::new();
        match io::stdin().read_to_string(&mut buffer) {
            Ok(_) => {
                if buffer.trim().is_empty() {
                    eprintln!("Error: No input provided. Use --help for usage information.");
                    std::process::exit(2);
                }
                buffer
            }
            Err(e) => {
                eprintln!("Error reading from stdin: {}", e);
                std::process::exit(1);
            }
        }
    };

    // Extract numbers from input text with international numeral support
    let numbers = extract_numbers_international(&input_text);
    
    if numbers.is_empty() {
        let language = get_language(&matches);
        let error_msg = localized_text("no_numbers_found", language);
        eprintln!("{}", error_msg);
        std::process::exit(1);
    }

    // Calculate Benford's Law analysis
    let result = match BenfordResult::new("stdin".to_string(), &numbers) {
        Ok(result) => result,
        Err(e) => {
            let language = get_language(&matches);
            let error_msg = localized_text("analysis_error", language);
            eprintln!("{}: {}", error_msg, e);
            std::process::exit(1);
        }
    };

    // Output results based on format
    let format = matches.get_one::<String>("format").unwrap();
    let quiet = matches.get_flag("quiet");
    let verbose = matches.get_flag("verbose");
    let language = get_language(&matches);

    match format.as_str() {
        "text" => print_text_output(&result, quiet, verbose, language),
        "json" => print_json_output(&result),
        _ => {
            let error_msg = localized_text("unsupported_format", language);
            eprintln!("{}: {}", error_msg, format);
            std::process::exit(2);
        }
    }

    // Exit with appropriate code based on risk level
    let exit_code = match result.risk_level {
        RiskLevel::Low | RiskLevel::Medium => 0,
        RiskLevel::High => 10,
        RiskLevel::Critical => 11,
    };
    
    std::process::exit(exit_code);
}

fn get_language(matches: &clap::ArgMatches) -> &str {
    match matches.get_one::<String>("lang").map(|s| s.as_str()) {
        Some("auto") | None => {
            // OS„ÅÆË®ÄË™ûË®≠ÂÆö„ÇíÊ§úÂá∫
            let lang = std::env::var("LANG").unwrap_or_default();
            if lang.starts_with("ja") { 
                "ja" 
            } else if lang.starts_with("zh") { 
                "zh" 
            } else if lang.starts_with("hi") {
                "hi"
            } else if lang.starts_with("ar") {
                "ar"
            } else { 
                "en" 
            }
        },
        Some("en") => "en",
        Some("ja") => "ja", 
        Some("zh") => "zh",
        Some("hi") => "hi",
        Some("ar") => "ar",
        Some(_) => "en", // „Éá„Éï„Ç©„É´„Éà„ÅØËã±Ë™û
    }
}

fn localized_text(key: &str, lang: &str) -> &'static str {
    match (lang, key) {
        // English
        ("en", "analysis_results") => "Benford's Law Analysis Results",
        ("en", "dataset") => "Dataset",
        ("en", "numbers_analyzed") => "Numbers analyzed",
        ("en", "risk_level") => "Risk Level",
        ("en", "digit_distribution") => "First Digit Distribution",
        ("en", "expected") => "expected",
        ("en", "deviation") => "deviation",
        ("en", "statistical_tests") => "Statistical Tests",
        ("en", "chi_square") => "Chi-square",
        ("en", "p_value") => "p-value",
        ("en", "mean_absolute_deviation") => "Mean Absolute Deviation",
        ("en", "interpretation") => "Interpretation",
        ("en", "normal_distribution") => "‚úÖ Normal distribution - data appears natural",
        ("en", "slight_deviation") => "‚ö†Ô∏è  Slight deviation - worth monitoring",
        ("en", "significant_deviation") => "üö® Significant deviation - potential anomaly detected",
        ("en", "critical_deviation") => "üíÄ Critical deviation - strong evidence of manipulation",
        ("en", "unsupported_format") => "Error: Unsupported output format",
        ("en", "no_numbers_found") => "Error: No valid numbers found in input",
        ("en", "analysis_error") => "Analysis error",
        
        // Êó•Êú¨Ë™û
        ("ja", "analysis_results") => "„Éô„É≥„Éï„Ç©„Éº„Éâ„ÅÆÊ≥ïÂâáËß£ÊûêÁµêÊûú",
        ("ja", "dataset") => "„Éá„Éº„Çø„Çª„ÉÉ„Éà",
        ("ja", "numbers_analyzed") => "Ëß£Êûê„Åó„ÅüÊï∞ÂÄ§Êï∞",
        ("ja", "risk_level") => "„É™„Çπ„ÇØ„É¨„Éô„É´",
        ("ja", "digit_distribution") => "ÂÖàÈ†≠Ê°ÅÂàÜÂ∏É",
        ("ja", "expected") => "ÊúüÂæÖÂÄ§",
        ("ja", "deviation") => "ÂÅèÂ∑Æ",
        ("ja", "statistical_tests") => "Áµ±Ë®àÊ§úÂÆö",
        ("ja", "chi_square") => "„Ç´„Ç§‰∫å‰πóÂÄ§",
        ("ja", "p_value") => "pÂÄ§",
        ("ja", "mean_absolute_deviation") => "Âπ≥ÂùáÁµ∂ÂØæÂÅèÂ∑Æ",
        ("ja", "interpretation") => "Ëß£Èáà",
        ("ja", "normal_distribution") => "‚úÖ Ê≠£Â∏∏„Å™ÂàÜÂ∏É - „Éá„Éº„Çø„ÅØËá™ÁÑ∂„Å´Ë¶ã„Åà„Åæ„Åô",
        ("ja", "slight_deviation") => "‚ö†Ô∏è  ËªΩÂæÆ„Å™ÂÅèÂ∑Æ - Áõ£Ë¶ñ„ÅåÂøÖË¶Å„Åß„Åô",
        ("ja", "significant_deviation") => "üö® ÊúâÊÑè„Å™ÂÅèÂ∑Æ - Áï∞Â∏∏„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô", 
        ("ja", "critical_deviation") => "üíÄ Ëá¥ÂëΩÁöÑÂÅèÂ∑Æ - Êìç‰Ωú„ÅÆÂº∑„ÅÑË®ºÊã†",
        ("ja", "unsupported_format") => "„Ç®„É©„Éº: „Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂá∫ÂäõÂΩ¢Âºè",
        ("ja", "no_numbers_found") => "„Ç®„É©„Éº: ÂÖ•Âäõ„Å´ÊúâÂäπ„Å™Êï∞ÂÄ§„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
        ("ja", "analysis_error") => "Ëß£Êûê„Ç®„É©„Éº",
        
        // ‰∏≠ÂõΩË™ûÔºàÁÆÄ‰ΩìÔºâ
        ("zh", "analysis_results") => "Êú¨Á¶èÂæ∑ÂÆöÂæãÂàÜÊûêÁªìÊûú",
        ("zh", "dataset") => "Êï∞ÊçÆÈõÜ",
        ("zh", "numbers_analyzed") => "ÂàÜÊûêÁöÑÊï∞Â≠óÊï∞Èáè",
        ("zh", "risk_level") => "È£éÈô©Á≠âÁ∫ß",
        ("zh", "digit_distribution") => "È¶ñ‰ΩçÊï∞Â≠óÂàÜÂ∏É",
        ("zh", "expected") => "È¢ÑÊúü",
        ("zh", "deviation") => "ÂÅèÂ∑Æ",
        ("zh", "statistical_tests") => "ÁªüËÆ°Ê£ÄÈ™å",
        ("zh", "chi_square") => "Âç°ÊñπÂÄº",
        ("zh", "p_value") => "pÂÄº",
        ("zh", "mean_absolute_deviation") => "Âπ≥ÂùáÁªùÂØπÂÅèÂ∑Æ",
        ("zh", "interpretation") => "Ëß£Èáä",
        ("zh", "normal_distribution") => "‚úÖ Ê≠£Â∏∏ÂàÜÂ∏É - Êï∞ÊçÆÁúãËµ∑Êù•Ëá™ÁÑ∂",
        ("zh", "slight_deviation") => "‚ö†Ô∏è  ËΩªÂæÆÂÅèÂ∑Æ - ÈúÄË¶ÅÁõëÊµã",
        ("zh", "significant_deviation") => "üö® ÊòæËëóÂÅèÂ∑Æ - ÂèØËÉΩÂ≠òÂú®ÂºÇÂ∏∏",
        ("zh", "critical_deviation") => "üíÄ ‰∏•ÈáçÂÅèÂ∑Æ - ÊúâÊìç‰ΩúÁöÑÂº∫ÁÉàËØÅÊçÆ",
        ("zh", "unsupported_format") => "ÈîôËØØ: ‰∏çÊîØÊåÅÁöÑËæìÂá∫Ê†ºÂºè",
        ("zh", "no_numbers_found") => "ÈîôËØØ: ËæìÂÖ•‰∏≠Êú™ÊâæÂà∞ÊúâÊïàÊï∞Â≠ó",
        ("zh", "analysis_error") => "ÂàÜÊûêÈîôËØØ",
        
        // ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)
        ("hi", "analysis_results") => "‡§¨‡•á‡§®‡§´‡•ã‡§∞‡•ç‡§° ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
        ("hi", "dataset") => "‡§°‡•á‡§ü‡§æ‡§∏‡•á‡§ü",
        ("hi", "numbers_analyzed") => "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§è‡§Å",
        ("hi", "risk_level") => "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞",
        ("hi", "digit_distribution") => "‡§™‡§π‡§≤‡•á ‡§Ö‡§Ç‡§ï ‡§ï‡§æ ‡§µ‡§ø‡§§‡§∞‡§£",
        ("hi", "expected") => "‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§",
        ("hi", "deviation") => "‡§µ‡§ø‡§ö‡§≤‡§®",
        ("hi", "statistical_tests") => "‡§∏‡§æ‡§Ç‡§ñ‡•ç‡§Ø‡§ø‡§ï‡•Ä‡§Ø ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£",
        ("hi", "chi_square") => "‡§ï‡§æ‡§à-‡§∏‡•ç‡§ï‡•ç‡§µ‡§æ‡§Ø‡§∞",
        ("hi", "p_value") => "p-‡§Æ‡§æ‡§®",
        ("hi", "mean_absolute_deviation") => "‡§î‡§∏‡§§ ‡§®‡§ø‡§∞‡§™‡•á‡§ï‡•ç‡§∑ ‡§µ‡§ø‡§ö‡§≤‡§®",
        ("hi", "interpretation") => "‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ",
        ("hi", "normal_distribution") => "‚úÖ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§ø‡§§‡§∞‡§£ - ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§¶‡§ø‡§ñ‡§§‡§æ ‡§π‡•à",
        ("hi", "slight_deviation") => "‚ö†Ô∏è  ‡§π‡§≤‡•ç‡§ï‡§æ ‡§µ‡§ø‡§ö‡§≤‡§® - ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
        ("hi", "significant_deviation") => "üö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡§ø‡§ö‡§≤‡§® - ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§æ",
        ("hi", "critical_deviation") => "üíÄ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§µ‡§ø‡§ö‡§≤‡§® - ‡§π‡•á‡§∞‡§æ‡§´‡•á‡§∞‡•Ä ‡§ï‡§æ ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£",
        ("hi", "unsupported_format") => "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™",
        ("hi", "no_numbers_found") => "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§á‡§®‡§™‡•Å‡§ü ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§µ‡•à‡§ß ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä",
        ("hi", "analysis_error") => "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        
        // ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic)
        ("ar", "analysis_results") => "ŸÜÿ™ÿßÿ¶ÿ¨ ÿ™ÿ≠ŸÑŸäŸÑ ŸÇÿßŸÜŸàŸÜ ÿ®ŸÜŸÅŸàÿ±ÿØ",
        ("ar", "dataset") => "ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
        ("ar", "numbers_analyzed") => "ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑŸÖÿ≠ŸÑŸÑÿ©",
        ("ar", "risk_level") => "ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÖÿÆÿßÿ∑ÿ±",
        ("ar", "digit_distribution") => "ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑÿ£ŸàŸÑ",
        ("ar", "expected") => "ŸÖÿ™ŸàŸÇÿπ",
        ("ar", "deviation") => "ÿßŸÜÿ≠ÿ±ÿßŸÅ",
        ("ar", "statistical_tests") => "ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿ©",
        ("ar", "chi_square") => "ŸÉÿßŸä ÿ™ÿ±ÿ®Ÿäÿπ",
        ("ar", "p_value") => "ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿßÿ≠ÿ™ŸÖÿßŸÑŸäÿ©",
        ("ar", "mean_absolute_deviation") => "ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑÿßŸÜÿ≠ÿ±ÿßŸÅ ÿßŸÑŸÖÿ∑ŸÑŸÇ",
        ("ar", "interpretation") => "ÿßŸÑÿ™ŸÅÿ≥Ÿäÿ±",
        ("ar", "normal_distribution") => "‚úÖ ÿ™Ÿàÿ≤Ÿäÿπ ÿ∑ÿ®ŸäÿπŸä - ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ®ÿØŸà ÿ∑ÿ®ŸäÿπŸäÿ©",
        ("ar", "slight_deviation") => "‚ö†Ô∏è  ÿßŸÜÿ≠ÿ±ÿßŸÅ ÿ∑ŸÅŸäŸÅ - Ÿäÿ≥ÿ™ÿ≠ŸÇ ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©",
        ("ar", "significant_deviation") => "üö® ÿßŸÜÿ≠ÿ±ÿßŸÅ ŸÉÿ®Ÿäÿ± - ÿ¥ÿ∞Ÿàÿ∞ ŸÖÿ≠ÿ™ŸÖŸÑ ŸÖŸÉÿ™ÿ¥ŸÅ",
        ("ar", "critical_deviation") => "üíÄ ÿßŸÜÿ≠ÿ±ÿßŸÅ ÿ≠ÿ±ÿ¨ - ÿØŸÑŸäŸÑ ŸÇŸàŸä ÿπŸÑŸâ ÿßŸÑÿ™ŸÑÿßÿπÿ®",
        ("ar", "unsupported_format") => "ÿÆÿ∑ÿ£: ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿ∫Ÿäÿ± ŸÖÿØÿπŸàŸÖ",
        ("ar", "no_numbers_found") => "ÿÆÿ∑ÿ£: ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ£ÿ±ŸÇÿßŸÖ ÿµÿ≠Ÿäÿ≠ÿ© ŸÅŸä ÿßŸÑÿ•ÿØÿÆÿßŸÑ",
        ("ar", "analysis_error") => "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ",
        
        // English (Default)
        (_, "analysis_results") => "Benford's Law Analysis Results",
        (_, "dataset") => "Dataset",
        (_, "numbers_analyzed") => "Numbers analyzed",
        (_, "risk_level") => "Risk Level",
        (_, "digit_distribution") => "First Digit Distribution",
        (_, "expected") => "expected",
        (_, "deviation") => "deviation",
        (_, "statistical_tests") => "Statistical Tests",
        (_, "chi_square") => "Chi-square",
        (_, "p_value") => "p-value",
        (_, "mean_absolute_deviation") => "Mean Absolute Deviation",
        (_, "interpretation") => "Interpretation",
        (_, "normal_distribution") => "‚úÖ Normal distribution - data appears natural",
        (_, "slight_deviation") => "‚ö†Ô∏è  Slight deviation - worth monitoring",
        (_, "significant_deviation") => "üö® Significant deviation - potential anomaly detected",
        (_, "critical_deviation") => "üíÄ Critical deviation - strong evidence of manipulation",
        (_, "unsupported_format") => "Error: Unsupported output format",
        (_, "no_numbers_found") => "Error: No valid numbers found in input",
        (_, "analysis_error") => "Analysis error",
        (_, _) => "Unknown message", // catch-all pattern
    }
}

fn print_text_output(result: &BenfordResult, quiet: bool, verbose: bool, lang: &str) {
    if quiet {
        // Just print the numbers
        for (i, &observed) in result.digit_distribution.iter().enumerate() {
            println!("{}: {:.1}%", i + 1, observed * 100.0);
        }
        return;
    }

    println!("{}", localized_text("analysis_results", lang));
    println!();
    println!("{}: {}", localized_text("dataset", lang), result.dataset_name);
    println!("{}: {}", localized_text("numbers_analyzed", lang), result.numbers_analyzed);
    println!("{}: {:?} {}", localized_text("risk_level", lang), result.risk_level, get_risk_emoji(&result.risk_level));
    println!();
    
    println!("{}:", localized_text("digit_distribution", lang));
    for (i, &observed) in result.digit_distribution.iter().enumerate() {
        let digit = i + 1;
        let expected = result.expected_distribution[i];
        let deviation = observed - expected;
        let bar = generate_bar(observed / 100.0, 0.3);
        
        println!("{}: {} {:.1}% ({}: {:.1}%, {}: {:+.1}%)", 
                 digit, bar, observed, 
                 localized_text("expected", lang), expected,
                 localized_text("deviation", lang), deviation);
    }
    
    println!();
    println!("{}:", localized_text("statistical_tests", lang));
    println!("{}: {:.2} ({}: {:.6})", 
             localized_text("chi_square", lang), result.chi_square,
             localized_text("p_value", lang), result.p_value);
    
    if verbose {
        println!("{}: {:.2}%", localized_text("mean_absolute_deviation", lang), result.mean_absolute_deviation);
        println!();
        println!("{}:", localized_text("interpretation", lang));
        match result.risk_level {
            RiskLevel::Low => println!("{}", localized_text("normal_distribution", lang)),
            RiskLevel::Medium => println!("{}", localized_text("slight_deviation", lang)),
            RiskLevel::High => println!("{}", localized_text("significant_deviation", lang)),
            RiskLevel::Critical => println!("{}", localized_text("critical_deviation", lang)),
        }
    }
}

fn print_json_output(result: &BenfordResult) {
    use serde_json::json;
    
    let output = json!({
        "dataset": result.dataset_name,
        "numbers_analyzed": result.numbers_analyzed,
        "risk_level": format!("{:?}", result.risk_level),
        "digits": {
            "1": {"observed": result.digit_distribution[0], "expected": result.expected_distribution[0], "deviation": result.digit_distribution[0] - result.expected_distribution[0]},
            "2": {"observed": result.digit_distribution[1], "expected": result.expected_distribution[1], "deviation": result.digit_distribution[1] - result.expected_distribution[1]},
            "3": {"observed": result.digit_distribution[2], "expected": result.expected_distribution[2], "deviation": result.digit_distribution[2] - result.expected_distribution[2]},
            "4": {"observed": result.digit_distribution[3], "expected": result.expected_distribution[3], "deviation": result.digit_distribution[3] - result.expected_distribution[3]},
            "5": {"observed": result.digit_distribution[4], "expected": result.expected_distribution[4], "deviation": result.digit_distribution[4] - result.expected_distribution[4]},
            "6": {"observed": result.digit_distribution[5], "expected": result.expected_distribution[5], "deviation": result.digit_distribution[5] - result.expected_distribution[5]},
            "7": {"observed": result.digit_distribution[6], "expected": result.expected_distribution[6], "deviation": result.digit_distribution[6] - result.expected_distribution[6]},
            "8": {"observed": result.digit_distribution[7], "expected": result.expected_distribution[7], "deviation": result.digit_distribution[7] - result.expected_distribution[7]},
            "9": {"observed": result.digit_distribution[8], "expected": result.expected_distribution[8], "deviation": result.digit_distribution[8] - result.expected_distribution[8]}
        },
        "statistics": {
            "chi_square": result.chi_square,
            "p_value": result.p_value,
            "mad": result.mean_absolute_deviation
        }
    });
    
    println!("{}", serde_json::to_string_pretty(&output).unwrap());
}

fn get_risk_emoji(risk: &RiskLevel) -> &'static str {
    match risk {
        RiskLevel::Low => "‚úÖ",
        RiskLevel::Medium => "‚ö†Ô∏è",
        RiskLevel::High => "üö®",
        RiskLevel::Critical => "üíÄ",
    }
}

fn generate_bar(value: f64, max_value: f64) -> String {
    let bar_length = 20;
    let filled = ((value / max_value) * bar_length as f64) as usize;
    let filled = filled.min(bar_length);
    
    let mut bar = String::new();
    for _ in 0..filled {
        bar.push('‚ñà');
    }
    for _ in filled..bar_length {
        bar.push('‚ñë');
    }
    bar
}

async fn fetch_url_content(url: &str) -> Result<String, reqwest::Error> {
    let client = reqwest::Client::new();
    let response = client.get(url).send().await?;
    
    if response.status().is_success() {
        let text = response.text().await?;
        Ok(text)
    } else {
        Err(reqwest::Error::from(response.error_for_status().unwrap_err()))
    }
}