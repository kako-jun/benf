name: Release Act 1 - Core

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set project name (Unix)
      if: matrix.os != 'windows-latest'
      run: echo "ARCHIVE_NAME=${{ env.PROJECT_NAME }}-${{ matrix.platform }}" >> $GITHUB_ENV
    
    - name: Set project name (Windows)
      if: matrix.os == 'windows-latest'
      run: echo "ARCHIVE_NAME=${{ env.PROJECT_NAME }}-${{ matrix.platform }}" >> $env:GITHUB_ENV
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run pre-release tests
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        chmod +x ./scripts/testing/04-pre-release-test-act1.sh
        ./scripts/testing/04-pre-release-test-act1.sh
    
    - name: Build release binary
      run: cargo build --package ${{ env.PROJECT_NAME }} --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ env.ARCHIVE_NAME }}.tar.gz ${{ env.PROJECT_NAME }}
        mv ${{ env.ARCHIVE_NAME }}.tar.gz ../../../

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Debug: ARCHIVE_NAME = $env:ARCHIVE_NAME"
        Write-Host "Debug: PROJECT_NAME = $env:PROJECT_NAME"
        Write-Host "Debug: Current directory = $(Get-Location)"
        Write-Host "Debug: Target directory contents:"
        Get-ChildItem target/${{ matrix.target }}/release -ErrorAction SilentlyContinue
        
        cd target/${{ matrix.target }}/release
        Write-Host "Debug: Now in directory = $(Get-Location)"
        Write-Host "Debug: Directory contents:"
        Get-ChildItem . -ErrorAction SilentlyContinue
        
        if (Test-Path "$env:PROJECT_NAME.exe") {
          Write-Host "Debug: Found $env:PROJECT_NAME.exe"
          
          # Use PowerShell's Compress-Archive instead of 7z
          Compress-Archive -Path "$env:PROJECT_NAME.exe" -DestinationPath "$env:ARCHIVE_NAME.zip" -Force
          
          if (Test-Path "$env:ARCHIVE_NAME.zip") {
            Write-Host "Debug: ZIP created successfully: $env:ARCHIVE_NAME.zip"
            Write-Host "Debug: ZIP size: $((Get-Item "$env:ARCHIVE_NAME.zip").Length) bytes"
            
            # Move to root directory using absolute paths
            $rootPath = (Get-Location).Path -replace '\\target\\[^\\]+\\release$', ''
            $destinationPath = Join-Path $rootPath "$env:ARCHIVE_NAME.zip"
            Write-Host "Debug: Root path: $rootPath"
            Write-Host "Debug: Moving ZIP to: $destinationPath"
            
            try {
              Move-Item "$env:ARCHIVE_NAME.zip" $destinationPath -Force -ErrorAction Stop
              Write-Host "Debug: Move-Item succeeded"
            } catch {
              Write-Error "ERROR: Move-Item failed with error: $($_.Exception.Message)"
              Write-Host "Debug: Error details: $($_.Exception.GetType().FullName)"
              Write-Host "Debug: Source file exists: $(Test-Path "$env:ARCHIVE_NAME.zip")"
              Write-Host "Debug: Destination directory exists: $(Test-Path (Split-Path $destinationPath))"
              Write-Host "Debug: Source file info:"
              Get-Item "$env:ARCHIVE_NAME.zip" -ErrorAction SilentlyContinue | Format-List
              exit 1
            }
            
            # Verify move was successful
            Write-Host "Debug: Checking if file exists at: $destinationPath"
            if (Test-Path $destinationPath) {
              Write-Host "Debug: ZIP successfully moved to root"
              Write-Host "Debug: Final ZIP size: $((Get-Item $destinationPath).Length) bytes"
            } else {
              Write-Error "ERROR: ZIP move failed - file not found in root"
              Write-Host "Debug: Available files in root:"
              Get-ChildItem $rootPath | ForEach-Object { Write-Host "  $($_.Name)" }
              exit 1
            }
          } else {
            Write-Error "ERROR: ZIP creation failed"
            exit 1
          }
        } else {
          Write-Error "ERROR: $env:PROJECT_NAME.exe not found"
          exit 1
        }

    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_NAME }}.tar.gz
        retention-days: 5
        if-no-files-found: error
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_NAME }}.zip
        retention-days: 5
        if-no-files-found: error

  create-release:
    needs: build-and-upload
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.release.outputs.created }}
      tag-name: ${{ steps.release.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ github.event.inputs.tag || github.ref_name }}"
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        
        gh release create "$TAG_NAME" \
          --title "Release $TAG_NAME" \
          --generate-notes
        
        echo "created=true" >> $GITHUB_OUTPUT
        
        # Upload all artifacts
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                gh release upload "$TAG_NAME" "$file"
              fi
            done
          fi
        done

  publish-crates:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        # Publish core library first
        cargo publish --package ${{ env.PROJECT_NAME }}-core
        
        # Wait a bit for the core package to be available
        sleep 30
        
        # Publish CLI tool
        cargo publish --package ${{ env.PROJECT_NAME }}