name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: lawkit-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: lawkit-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: lawkit-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: lawkit-macos-aarch64

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --package lawkit --release --target ${{ matrix.target }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.name }}.tar.gz lawkit benf
        mv ${{ matrix.name }}.tar.gz ../../../

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}.zip lawkit.exe benf.exe
        mv ${{ matrix.name }}.zip ../../../

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}.tar.gz
          ${{ matrix.name }}.zip
        retention-days: 5

  create-release:
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Determine the tag name
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME="${{ github.event.inputs.tag }}"
        else
          TAG_NAME="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "Working with tag: $TAG_NAME"
        
        # Check if release already exists
        if gh release view $TAG_NAME >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, uploading artifacts..."
        else
          # Create new release
          gh release create $TAG_NAME \
            --title "lawkit $TAG_NAME - Incremental Streaming Processing Release" \
            --notes "## ðŸŽ¯ Major Features
- **Automatic Optimization**: Streaming processing activates at 10,000+ data points
- **Memory Efficiency**: Chunked processing for large datasets  
- **Zero Configuration**: Automatic optimization without user intervention
- **Complete Coverage**: All statistical laws support streaming processing

## ðŸ§ª Quality Assurance
- **127 Tests**: 100% pass rate across all components
- **Threshold Testing**: 8 comprehensive optimization behavior tests
- **Streaming Validation**: Verified activation/deactivation thresholds
- **Memory Testing**: Large dataset efficiency verification

## ðŸ“¦ Package Improvements
- **npm/PyPI**: Enhanced package configurations
- **Funding Support**: GitHub Sponsors integration
- **Dependency Cleanup**: Optimized package dependencies
- **Monorepo Structure**: Clear directory specifications"
        fi
        
        # Upload all artifacts
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $file..."
                gh release upload $TAG_NAME "$file"
              fi
            done
          fi
        done